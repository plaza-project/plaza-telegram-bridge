#!/usr/bin/env python3

from plaza_telegram_service import TelegramBot
from plaza_telegram_service import config
from plaza_telegram_service.storage import sqlite_storage
import logging
import sys

from plaza_bridge import PlazaBridge
from plaza_bridge.legacy import (
    ServiceConfiguration,
    MessageBasedServiceRegistration,
    ServiceBlock,
    ServiceTriggerBlock,
    BlockArgument,
    CallbackBlockArgument,
    VariableBlockArgument,
    BlockType,
    BlockContext,
)


class Registerer(MessageBasedServiceRegistration):
    def __init__(self, bot, *args, **kwargs):
        MessageBasedServiceRegistration.__init__(self, *args, **kwargs)
        self.bot = bot

    def get_call_to_action_text(self, extra_data):
        if not extra_data:
            return 'Just greet <a href="https://telegram.me/{bot_name}">{bot_name}</a>'.format(
                bot_name=self.bot.bot_name
            )
        return (
            'Send the following to <a href="https://telegram.me/{bot_name}">{bot_name}</a>'
            "<console>/register {user_id}</console>".format(
                bot_name=self.bot.bot_name, user_id=extra_data.user_id
            )
        )


STORAGE = sqlite_storage.get_default()

bot_token = config.get_bot_token()
bot_name = config.get_bot_name()

BOT = TelegramBot(bot_token, bot_name)
STORAGE = sqlite_storage.get_default()

bridge = PlazaBridge(
    name="Telegram - test",
    # is_public=True,  # False by default
    registerer=Registerer(BOT),
)


def get_chat_name(chat):
    if chat.title is not None:
        return chat.title
    if chat.username is not None:
        return chat.username
    logging.error("Unknown chat name from: {}".format(chat))
    return "chat-{}".format(chat.id)


## TODO: Send signal
# return ServiceConfiguration(
#     service_name="Telegram",
#     is_public=True,
#     registration=self.registerer,
#     blocks=[
#         ServiceTriggerBlock(
#             id="on_new_message",
#             function_name="on_new_message",
#             message="When received any message. Set %1",
#             arguments=[
#                 VariableBlockArgument(),
#             ],
#             save_to=BlockContext.ARGUMENTS[0],
#         ),
#         ServiceTriggerBlock(
#             id="on_command",
#             function_name="on_command",
#             message="When received %1",
#             arguments=[
#                 BlockArgument(str, "/start"),
#             ],
#             expected_value=BlockContext.ARGUMENTS[0],
#             key="on_new_message",
#         ),
#     ],
# )


@bridge.callback
def get_known_channels(extra_data):
    results = {}
    for (
        _telegram_user,
        telegram_room_id,
        telegram_room_name,
    ) in STORAGE.get_telegram_rooms_for_plaza_user(extra_data.user_id):
        results[telegram_room_id] = {"name": telegram_room_name}
    return results


def on_new_message(update):
    if update.message is None:
        return

    user = update.message.from_user.id
    room = update.message.chat.id

    # Route the message depending on if the user is already registered
    if not STORAGE.is_telegram_user_registered(user):
        on_non_registered_event(user, room, update)
    else:
        # If the user is registered, allow it to send messages to this chat
        chat_name = get_chat_name(update.message.chat)
        STORAGE.add_user_to_room(user, room, room_name=chat_name)

        # And send the event about this message reception
        # PlazaBridge.emit_event_sync(
        #     self,
        #     to_user=self.storage.get_plaza_user_from_telegram(user),
        #     key="on_new_message",
        #     content=update.message.text,
        #     event=update.to_dict(),
        # )
BOT.on_message = on_new_message


def on_non_registered_event(user, room, update):
    if update.message.text is None:
        return

    msg = update.message.text
    prefix = "/register "
    if msg.startswith(prefix):
        register_id = msg[len(prefix) :]
        STORAGE.register_user(user, register_id)
        BOT.send(
            room,
            "Welcome! You're registered!\n"
            "Now you can use this bot in your programs.",
        )
    else:
        BOT.send(
            room,
            "Hi! I'm a bot in the making, ask @{maintainer} for more info if you want to know how to program me ;).".format(
                maintainer=config.get_maintainer_telegram_handle()
            ),
        )


@bridge.operation(
    message="O - On channel %1 say %2",
    arguments=[
        CallbackBlockArgument(str, get_known_channels),
        BlockArgument(str, "Hello"),
    ],
)
def send_message(room_id, message, extra_data):
    BOT.send(room_id, message)


@bridge.operation(message="O - Respond %1", arguments=[BlockArgument(str, "Hello")])
def answer_message(message, extra_data):
    if extra_data.last_monitor_value is None:
        logging.error("Answer_message without previous call")
        return

    last_room_id = (
        extra_data.last_monitor_value.get("message", {}).get("chat", {}).get("id", None)
    )
    if last_room_id is None:
        logging.error(
            "Cannot call answer_message when last_messate is “{}”".format(
                extra_data.last_monitor_value
            )
        )
        return

    BOT.send(last_room_id, message)


if __name__ == "__main__":
    logging.basicConfig(format="%(asctime)s - %(levelname)s [%(filename)s] %(message)s")
    logging.getLogger().setLevel(logging.DEBUG)

    bridge.endpoint = config.get_bridge_endpoint()
    BOT.start()
    bridge.run()
